#set( $symbol_pound = '#' )
#set( $symbol_dollar = '$' )
#set( $symbol_escape = '\' )
spring:
  main:
    allow-circular-references: true ${symbol_pound} 允许循环依赖，因为项目是三层架构，无法避免这个情况。
    allow-bean-definition-overriding: true ${symbol_pound} 允许 Bean 覆盖，例如说 Dubbo 或者 Feign 等会存在重复定义的服务

  ${symbol_pound} Servlet 配置
  servlet:
    ${symbol_pound} 文件上传相关配置项
    multipart:
      max-file-size: 16MB ${symbol_pound} 单个文件大小
      max-request-size: 32MB ${symbol_pound} 设置总上传的文件大小
  mvc:
    pathmatch:
      matching-strategy: ANT_PATH_MATCHER ${symbol_pound} 解决 SpringFox 与 SpringBoot 2.6.x 不兼容的问题，参见 SpringFoxHandlerProviderBeanPostProcessor 类

  ${symbol_pound} Jackson 配置项
  jackson:
    serialization:
      write-dates-as-timestamps: true ${symbol_pound} 设置 Date 的格式，使用时间戳
      write-date-timestamps-as-nanoseconds: false ${symbol_pound} 设置不使用 nanoseconds 的格式。例如说 1611460870.401，而是直接 1611460870401
      write-durations-as-timestamps: true ${symbol_pound} 设置 Duration 的格式，使用时间戳
      fail-on-empty-beans: false ${symbol_pound} 允许序列化无属性的 Bean

  ${symbol_pound} Cache 配置项
  cache:
    type: REDIS
    redis:
      time-to-live: 1h ${symbol_pound} 设置过期时间为 1 小时

--- ${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound} 接口文档配置 ${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}

springdoc:
  api-docs:
    enabled: true ${symbol_pound} 1. 是否开启 Swagger 接文档的元数据
    path: /v3/api-docs
  swagger-ui:
    enabled: true ${symbol_pound} 2.1 是否开启 Swagger 文档的官方 UI 界面
    path: /swagger-ui.html
  default-flat-param-object: true ${symbol_pound} 参见 https://doc.xiaominfo.com/docs/faq/v4/knife4j-parameterobject-flat-param 文档

knife4j:
  enable: true ${symbol_pound} 2.2 是否开启 Swagger 文档的 Knife4j UI 界面
  setting:
    language: zh_cn

${symbol_pound} MyBatis Plus 的配置项
mybatis-plus:
  configuration:
    map-underscore-to-camel-case: true ${symbol_pound} 虽然默认为 true ，但是还是显示去指定下。
    ${symbol_pound}log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  global-config:
    db-config:
      id-type: NONE ${symbol_pound} “智能”模式，基于 IdTypeEnvironmentPostProcessor + 数据源的类型，自动适配成 AUTO、INPUT 模式。
${symbol_pound}      id-type: AUTO ${symbol_pound} 自增 ID，适合 MySQL 等直接自增的数据库
${symbol_pound}      id-type: INPUT ${symbol_pound} 用户输入 ID，适合 Oracle、PostgreSQL、Kingbase、DB2、H2 数据库
${symbol_pound}      id-type: ASSIGN_ID ${symbol_pound} 分配 ID，默认使用雪花算法。注意，Oracle、PostgreSQL、Kingbase、DB2、H2 数据库时，需要去除实体类上的 @KeySequence 注解
      logic-delete-value: 1 ${symbol_pound} 逻辑已删除值(默认为 1)
      logic-not-delete-value: 0 ${symbol_pound} 逻辑未删除值(默认为 0)
  type-aliases-package: ${symbol_dollar}{saltyfish.info.base-package}.infrastructure.entity
  encryptor:
    password: XDV71a+xqStEA3WH ${symbol_pound} 加解密的秘钥，可使用 https://www.imaegoo.com/2020/aes-key-generator/ 网站生成

mybatis-plus-join:
    banner: false ${symbol_pound} 关闭控制台的 Banner 打印

${symbol_pound} feign调用超时时间配置
feign:
  okhttp:
    enabled: true
  sentinel:
    enabled: true
  client:
    config:
      default:
        connectTimeout: 10000
        readTimeout: 600000
--- ${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound} MQ 消息队列相关配置 ${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}

${symbol_pound} Spring Data Redis 配置
spring:
  data:
    redis:
      repositories:
        enabled: false ${symbol_pound} 项目未使用到 Spring Data Redis 的 Repository，所以直接禁用，保证启动速度

--- ${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound} 消息队列相关 ${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}

${symbol_pound} rocketmq 配置项，对应 RocketMQProperties 配置类
rocketmq:
  ${symbol_pound} Producer 配置项
  producer:
    group: ${symbol_dollar}{spring.application.name}_PRODUCER ${symbol_pound} 生产者分组

spring:
  ${symbol_pound} Kafka 配置项，对应 KafkaProperties 配置类
  kafka:
    ${symbol_pound} Kafka Producer 配置项
    producer:
      acks: 1 ${symbol_pound} 0-不应答。1-leader 应答。all-所有 leader 和 follower 应答。
      retries: 3 ${symbol_pound} 发送失败时，重试发送的次数
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer ${symbol_pound} 消息的 value 的序列化
    ${symbol_pound} Kafka Consumer 配置项
    consumer:
      auto-offset-reset: earliest ${symbol_pound} 设置消费者分组最初的消费进度为 earliest 。可参考博客 https://blog.csdn.net/lishuangzhe7047/article/details/74530417 理解
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: '*'
    ${symbol_pound} Kafka Consumer Listener 监听器配置
    listener:
      missing-topics-fatal: false ${symbol_pound} 消费监听接口监听的主题不存在时，默认会报错。所以通过设置为 false ，解决报错

--- ${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound} 定时任务相关配置 ${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}

xxl:
  job:
    executor:
      appname: ${symbol_dollar}{spring.application.name} ${symbol_pound} 执行器 AppName
      logpath: ${symbol_dollar}{user.home}/logs/xxl-job/${symbol_dollar}{spring.application.name} ${symbol_pound} 执行器运行日志文件存储磁盘路径
    accessToken: default_token ${symbol_pound} 执行器通讯TOKEN

--- ${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound} 相关配置 ${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}${symbol_pound}

saltyfish:
  info:
    version: ${version}
    base-package: ${package}
  web:
    admin-ui:
      url: http://www.baidu.com ${symbol_pound} Admin 管理后台 UI 的地址
  swagger:
    title: 管理后台
    description: 提供管理员管理的所有功能
    version: ${symbol_dollar}{saltyfish.info.version}
    base-package: ${symbol_dollar}{saltyfish.info.base-package}
  tenant: ${symbol_pound} 多租户相关配置项
    enable: true
    ignore-urls:
      - /remote-api/infra/file/*/get/** ${symbol_pound} 获取图片，和租户无关
    ignore-tables:
      - infra_codegen_column

debug: false
